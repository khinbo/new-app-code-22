{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","PAYMENT_INTENT","SETUP_INTENT","createPaymentMethod","data","options","NativeStripeSdk","paymentMethod","error","createToken","params","type","country","toLowerCase","routingNumber","MissingRoutingNumber","token","retrievePaymentIntent","clientSecret","paymentIntent","retrieveSetupIntent","setupIntent","confirmPayment","paymentIntentClientSecret","isApplePaySupported","isiOS","presentApplePay","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","errorAddressFields","confirmApplePayPayment","handleNextAction","handleCardAction","confirmSetupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","verifyMicrodepositsForPayment","isAndroid","ConfirmPaymentError","Failed","verifyMicrodeposits","verifyMicrodepositsForSetup","ConfirmSetupIntentError","initPaymentSheet","paymentOption","presentPaymentSheet","confirmPaymentSheetPayment","isGooglePaySupported","initGooglePay","presentGooglePay","createGooglePayPaymentMethod","openApplePaySetup","collectBankAccountForPayment","collectBankAccount","collectBankAccountForSetup"],"mappings":"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","sourcesContent":["import { createError, isAndroid, isiOS } from './helpers';\nimport { MissingRoutingNumber } from './types/Errors';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentResult,\n  ConfirmPaymentError,\n  ConfirmSetupIntentError,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  CreateTokenResult,\n  GooglePayInitResult,\n  HandleNextActionResult,\n  InitPaymentSheetResult,\n  PaymentMethodCreateParams,\n  PaymentSheet,\n  PayWithGooglePayResult,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  StripeError,\n  GooglePay,\n  CreateGooglePayPaymentMethodResult,\n  OpenApplePaySetupResult,\n  CreateTokenParams,\n  VerifyMicrodepositsParams,\n  CollectBankAccountParams,\n} from './types';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\nconst PAYMENT_INTENT = 'payment';\nconst SETUP_INTENT = 'setup';\n\nexport const createPaymentMethod = async (\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.createPaymentMethod(\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createToken = async (\n  params: CreateTokenParams\n): Promise<CreateTokenResult> => {\n  if (\n    params.type === 'BankAccount' &&\n    params.country?.toLowerCase() === 'us' &&\n    !params.routingNumber\n  ) {\n    return {\n      error: MissingRoutingNumber,\n    };\n  }\n\n  try {\n    const { token, error } = await NativeStripeSdk.createToken(params);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      token: token!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const { paymentIntent, error } =\n      await NativeStripeSdk.retrievePaymentIntent(clientSecret);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrieveSetupIntent = async (\n  clientSecret: string\n): Promise<RetrieveSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.retrieveSetupIntent(\n      clientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const confirmPayment = async (\n  paymentIntentClientSecret: string,\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<ConfirmPaymentResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.confirmPayment(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.presentApplePay(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return { paymentMethod: paymentMethod! };\n  } catch (error) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[],\n  errorAddressFields: Array<{\n    field: ApplePay.AddressFields;\n    message?: string;\n  }> = []\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(\n      summaryItems,\n      errorAddressFields\n    );\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: createError({\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      }),\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleNextAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleNextActionResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.handleNextAction(\n      paymentIntentClientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\n/**\n * @deprecated This method is deprecated, you should use `handleNextAction` as a drop-in replacement instead.\n */\nexport const handleCardAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleNextActionResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.handleNextAction(\n      paymentIntentClientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  data: ConfirmSetupIntent.Params,\n  options: ConfirmSetupIntent.Options = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const { tokenId, error } = await NativeStripeSdk.createTokenForCVCUpdate(\n      cvc\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      tokenId: tokenId!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const verifyMicrodepositsForPayment = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<ConfirmPaymentResult> => {\n  if (isAndroid) {\n    return {\n      error: createError({\n        code: ConfirmPaymentError.Failed,\n        message:\n          'verifyMicrodepositsForPayment is only supported on iOS on this version of @stripe/stripe-react-native. Please verify with paymentIntent.nextAction.redirectUrl',\n      }),\n    };\n  }\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      PAYMENT_INTENT,\n      clientSecret,\n      params\n    )) as ConfirmPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const verifyMicrodepositsForSetup = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<ConfirmSetupIntentResult> => {\n  if (isAndroid) {\n    return {\n      error: createError({\n        code: ConfirmSetupIntentError.Failed,\n        message:\n          'verifyMicrodepositsForSetup is only supported on iOS on this version of @stripe/stripe-react-native. Please verify with setupIntent.nextAction.redirectUrl',\n      }),\n    };\n  }\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      SETUP_INTENT,\n      clientSecret,\n      params\n    )) as ConfirmSetupIntentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const { paymentOption, error } = await NativeStripeSdk.initPaymentSheet(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const presentPaymentSheet =\n  async (): Promise<PresentPaymentSheetResult> => {\n    try {\n      const { paymentOption, error } =\n        await NativeStripeSdk.presentPaymentSheet();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {\n        paymentOption: paymentOption,\n      };\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\nexport const confirmPaymentSheetPayment =\n  async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n    try {\n      const { error } = await NativeStripeSdk.confirmPaymentSheetPayment();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {};\n    } catch (error) {\n      return {\n        error: createError(error),\n      };\n    }\n  };\n\nexport const isGooglePaySupported = async (\n  params?: GooglePay.IsGooglePaySupportedParams\n): Promise<boolean> => {\n  return (\n    isAndroid && (await NativeStripeSdk.isGooglePaySupported(params ?? {}))\n  );\n};\n\nexport const initGooglePay = async (\n  params: GooglePay.InitParams\n): Promise<GooglePayInitResult> => {\n  try {\n    const { error } = await NativeStripeSdk.initGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const presentGooglePay = async (\n  params: GooglePay.SetupIntentParams\n): Promise<PayWithGooglePayResult> => {\n  try {\n    const { error } = await NativeStripeSdk.presentGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const createGooglePayPaymentMethod = async (\n  params: GooglePay.CreatePaymentMethodParams\n): Promise<CreateGooglePayPaymentMethodResult> => {\n  try {\n    const { error, paymentMethod } =\n      await NativeStripeSdk.createGooglePayPaymentMethod(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const openApplePaySetup = async (): Promise<OpenApplePaySetupResult> => {\n  try {\n    const { error } = await NativeStripeSdk.openApplePaySetup();\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const collectBankAccountForPayment = async (\n  clientSecret: string,\n  params: CollectBankAccountParams\n): Promise<ConfirmPaymentResult> => {\n  if (isAndroid) {\n    return {\n      error: createError({\n        code: ConfirmPaymentError.Failed,\n        message:\n          'collectBankAccountForPayment is only supported on iOS on this version of @stripe/stripe-react-native.',\n      }),\n    };\n  }\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      PAYMENT_INTENT,\n      clientSecret,\n      params\n    )) as ConfirmPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const collectBankAccountForSetup = async (\n  clientSecret: string,\n  params: CollectBankAccountParams\n): Promise<ConfirmSetupIntentResult> => {\n  if (isAndroid) {\n    return {\n      error: createError({\n        code: ConfirmSetupIntentError.Failed,\n        message:\n          'collectBankAccountForSetup is only supported on iOS on this version of @stripe/stripe-react-native.',\n      }),\n    };\n  }\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      SETUP_INTENT,\n      clientSecret,\n      params\n    )) as ConfirmSetupIntentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n"]}