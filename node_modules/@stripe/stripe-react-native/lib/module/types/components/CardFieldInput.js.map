{"version":3,"sources":["CardFieldInput.ts"],"names":["ValidationState","CardFieldInput"],"mappings":"8KAMcA,CAAAA,e,WAAAA,e,EAAAA,e,kBAAAA,e,sBAAAA,e,4BAAAA,e,yBAAAA,e,GAAAA,e,yDAFGC,c,0BAAAA,c","sourcesContent":["import type { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\nimport type { Nullable } from '../';\nimport type { Card } from '../Card';\n\nexport namespace CardFieldInput {\n  export type Names = 'CardNumber' | 'Cvc' | 'ExpiryDate' | 'PostalCode';\n  export enum ValidationState {\n    Valid = 'Valid',\n    Invalid = 'Invalid',\n    Incomplete = 'Incomplete',\n    Unknown = 'Unknown',\n  }\n\n  export interface Details {\n    last4: string;\n    expiryMonth: number;\n    expiryYear: number;\n    postalCode?: string;\n    brand: Card.Brand;\n    complete: boolean;\n    validExpiryDate: ValidationState;\n    validCVC: ValidationState;\n    validNumber: ValidationState;\n    /**\n     * WARNING: Full card details are only returned when the `dangerouslyGetFullCardDetails` prop\n     * on the `CardField` component is set to `true`.\n     * Only do this if you're certain that you fulfill the necessary PCI compliance requirements.\n     * Make sure that you're not mistakenly logging or storing full card details!\n     * See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance\n     */\n    number?: string;\n  }\n\n  export interface Styles {\n    borderWidth?: number;\n    backgroundColor?: string;\n    borderColor?: string;\n    borderRadius?: number;\n    textColor?: string;\n    fontSize?: number;\n    placeholderColor?: string;\n    cursorColor?: string;\n    textErrorColor?: string;\n    fontFamily?: string;\n  }\n\n  export interface Placeholders {\n    number?: string;\n    expiration?: string;\n    cvc?: string;\n    postalCode?: string;\n  }\n\n  /**\n   * @ignore\n   */\n  export interface NativeProps {\n    style?: StyleProp<ViewStyle>;\n    value?: Partial<Details>;\n    postalCodeEnabled?: boolean;\n    autofocus?: boolean;\n    onCardChange(event: NativeSyntheticEvent<Details>): void;\n    onFocusChange(\n      event: NativeSyntheticEvent<{ focusedField: Nullable<Names> }>\n    ): void;\n    cardStyle?: Styles;\n    placeholder?: Placeholders;\n  }\n\n  export interface Methods {\n    focus(): void;\n    blur(): void;\n    clear(): void;\n  }\n}\n"]}