{"version":3,"sources":["BigListItemRecycler.js"],"names":["BigListItemRecycler","constructor","items","pendingItems","forEach","item","type","section","index","itemsForType","get","position","height","itemKey","key","push","fill","Object","values","BigListItemType","length","lastKey"],"mappings":"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","sourcesContent":["import { BigListItemType } from \"./BigListItem\";\n\nclass BigListItemRecycler {\n  static lastKey = 0;\n  /**\n   * Constructor.\n   * @param {object[]} items\n   */\n  constructor(items) {\n    this.items = {};\n    this.pendingItems = {};\n    items.forEach((item) => {\n      const { type, section, index } = item;\n      const [itemsForType] = this.itemsForType(type);\n      itemsForType[`${type}:${section}:${index}`] = item;\n    });\n  }\n\n  /**\n   * Items for type.\n   * @param {any} type\n   * @returns {(*|{}|*[])[]}\n   */\n  itemsForType(type) {\n    return [\n      this.items[type] || (this.items[type] = {}),\n      this.pendingItems[type] || (this.pendingItems[type] = []),\n    ];\n  }\n\n  /**\n   * Get item.\n   * @param {any} type\n   * @param {number} position\n   * @param {number} height\n   * @param {int} section\n   * @param {int} index\n   * @returns {{section: int, position: number, index: number, type: any, key: number, height: int}}\n   */\n  get({ type, position, height, section = 0, index = 0 }) {\n    const [items, pendingItems] = this.itemsForType(type);\n    const itemKey = `${type}:${section}:${index}`;\n    let item = items[itemKey];\n    if (item == null) {\n      item = { type, key: -1, position, height, section, index };\n      pendingItems.push(item);\n    } else {\n      item.position = position;\n      item.height = height;\n      delete items[itemKey];\n    }\n    return item;\n  }\n\n  /**\n   * Fill.\n   */\n  fill() {\n    Object.values(BigListItemType).forEach((type) => {\n      const [items, pendingItems] = this.itemsForType(type);\n      let index = 0;\n      Object.values(items).forEach(({ key }) => {\n        const item = pendingItems[index];\n        if (item == null) {\n          return false;\n        }\n        item.key = key;\n        index++;\n      });\n\n      for (; index < pendingItems.length; index++) {\n        pendingItems[index].key = ++BigListItemRecycler.lastKey;\n      }\n      pendingItems.length = 0;\n    });\n  }\n}\nexport default BigListItemRecycler;\n"]}