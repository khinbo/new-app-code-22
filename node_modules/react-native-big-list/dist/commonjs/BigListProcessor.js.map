{"version":3,"sources":["BigListProcessor.js"],"names":["BigListProcessor","constructor","scrollView","sections","headerHeight","footerHeight","sectionHeaderHeight","itemHeight","sectionFooterHeight","insetTop","insetBottom","numColumns","uniform","getItemHeight","section","index","Number","getHeaderHeight","getFooterHeight","getSectionHeaderHeight","getSectionFooterHeight","process","top","bottom","prevItems","items","recycler","BigListItemRecycler","position","counter","height","spacerHeight","isFullRow","item","type","BigListItemType","ITEM","isVisibleBelow","isVisible","force","SECTION_HEADER","fullRow","prevHeight","push","itemsArray","forEach","get","pushSpacer","SPACER","pushItem","getSpacerHeight","itemsCounter","reduce","totalHeight","i","length","HEADER","rows","initialSpacerHeight","prevSection","splice","SECTION_FOOTER","FOOTER","fill","scrollToPosition","targetSection","targetIndex","animated","scrollTop","foundIndex","Math","ceil","uniformHeight","scrollTo","x","y","max"],"mappings":"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","sourcesContent":["import { BigListItemType } from \"./BigListItem\";\nimport BigListItemRecycler from \"./BigListItemRecycler\";\nimport { isNumeric } from \"./utils\";\n\nexport default class BigListProcessor {\n  /**\n   * Constructor.\n   * @param {ScrollView} scrollView\n   * @param {array[]|object|null|undefined} sections\n   * @param {number|function|null|undefined} headerHeight\n   * @param {number|function|null|undefined} footerHeight\n   * @param {number|function|null|undefined} sectionHeaderHeight\n   * @param {number|function|null|undefined} itemHeight\n   * @param {number|function|null|undefined} sectionFooterHeight\n   * @param {number|function|null|undefined} insetTop\n   * @param {number|function|null|undefined} insetBottom\n   * @param {number|null|undefined} numColumns\n   */\n  constructor({\n    scrollView,\n    sections,\n    headerHeight,\n    footerHeight,\n    sectionHeaderHeight,\n    itemHeight,\n    sectionFooterHeight,\n    insetTop,\n    insetBottom,\n    numColumns,\n  }) {\n    this.headerHeight = headerHeight;\n    this.footerHeight = footerHeight;\n    this.sectionHeaderHeight = sectionHeaderHeight;\n    this.itemHeight = itemHeight;\n    this.sectionFooterHeight = sectionFooterHeight;\n    this.sections = sections;\n    this.insetTop = insetTop;\n    this.insetBottom = insetBottom;\n    this.uniform = isNumeric(itemHeight);\n    this.scrollView = scrollView;\n    this.numColumns = numColumns;\n  }\n\n  /**\n   * Get item height.\n   * @returns {number|*}\n   */\n  getItemHeight(section, index) {\n    const { itemHeight } = this;\n    return isNumeric(itemHeight)\n      ? Number(itemHeight)\n      : itemHeight(section, index);\n  }\n\n  /**\n   * Get header height.\n   * @returns {number|*}\n   */\n  getHeaderHeight() {\n    const { headerHeight } = this;\n    return isNumeric(headerHeight) ? Number(headerHeight) : headerHeight();\n  }\n\n  /**\n   * Get footer height.\n   * @returns {number|*}\n   */\n  getFooterHeight() {\n    const { footerHeight } = this;\n    return isNumeric(footerHeight) ? Number(footerHeight) : footerHeight();\n  }\n\n  /**\n   * Get section height.\n   * @returns {number|*}\n   */\n  getSectionHeaderHeight(section) {\n    const { sectionHeaderHeight } = this;\n    return isNumeric(sectionHeaderHeight)\n      ? Number(sectionHeaderHeight)\n      : sectionHeaderHeight(section);\n  }\n\n  /**\n   * Get section footer height.\n   * @returns {number|*}\n   */\n  getSectionFooterHeight(section) {\n    const { sectionFooterHeight } = this;\n    return isNumeric(sectionFooterHeight)\n      ? Number(sectionFooterHeight)\n      : sectionFooterHeight(section);\n  }\n\n  /**\n   * Process list items.\n   * @param {number} top\n   * @param {number} bottom\n   * @param {array} prevItems\n   * @returns {{items: [], height: *}}\n   */\n  process(top, bottom, prevItems) {\n    const { sections } = this;\n    const items = [];\n    const recycler = new BigListItemRecycler(prevItems);\n\n    let position;\n    let counter = -1; // Counter of items per row pushed\n    let height = this.insetTop;\n    let spacerHeight = height;\n\n    /**\n     * The width of the row is the entire line.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isFullRow = (item) => {\n      // Only items can be rendered with column format, so all others are full row\n      return item.type !== BigListItemType.ITEM;\n    };\n\n    /**\n     * Is visible below.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isVisibleBelow = (item) => {\n      const { height: itemHeight } = item;\n      counter = -1;\n      if (height > bottom) {\n        spacerHeight += itemHeight;\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    /**\n     * Is the item visible.\n     * @param {object} item\n     * @param {bool} force\n     * @returns {boolean}\n     */\n    const isVisible = (item, force = false) => {\n      // Check section headers visibility below\n      if (item.type === BigListItemType.SECTION_HEADER) {\n        return isVisibleBelow(item);\n      }\n      // Dimensions\n      const { height: itemHeight } = item;\n      const fullRow = isFullRow(item);\n      const prevHeight = height;\n      // Increase or reset counter\n      counter = fullRow ? -1 : counter + 1;\n      if (fullRow || counter % this.numColumns === 0) {\n        height += itemHeight;\n      }\n      // Check if is visible\n      if (force || (height > top && prevHeight < bottom)) {\n        return true;\n      } else {\n        if (fullRow || counter % this.numColumns === 0) {\n          spacerHeight += itemHeight;\n        }\n        return false;\n      }\n    };\n\n    /**\n     * Get recycled views and push items.\n     * @param {object} itemsArray\n     */\n    const push = (...itemsArray) => {\n      itemsArray.forEach((item) => {\n        items.push(recycler.get(item));\n      });\n    };\n\n    /**\n     * Push spacer.\n     * @param {object} item\n     */\n    const pushSpacer = (item) => {\n      if (spacerHeight > 0) {\n        push({\n          type: BigListItemType.SPACER,\n          position: item.position - spacerHeight,\n          height: spacerHeight,\n          section: item.section,\n          index: item.index,\n        });\n        spacerHeight = 0;\n      }\n    };\n\n    /**\n     * Push the item when is visible.\n     * @param {object} item\n     * @param {bool} force\n     */\n    const pushItem = (item, force = false) => {\n      if (isVisible(item, force)) {\n        pushSpacer(item);\n        push(item);\n      }\n    };\n\n    /**\n     * Calculate spacer height.\n     */\n    const getSpacerHeight = () => {\n      let itemsCounter = -1;\n      return items.reduce((totalHeight, item, i) => {\n        if (i !== items.length - 1) {\n          const fullRow = isFullRow(item);\n          itemsCounter = fullRow ? 0 : itemsCounter + 1;\n          if (fullRow || itemsCounter % this.numColumns === 0) {\n            return totalHeight + item.height;\n          }\n        }\n        return totalHeight;\n      }, 0);\n    };\n\n    // Header\n    const headerHeight = this.getHeaderHeight();\n    if (headerHeight > 0) {\n      position = height;\n      pushItem(\n        {\n          type: BigListItemType.HEADER,\n          position: position,\n          height: headerHeight,\n        },\n        true,\n      );\n    }\n    // Sections\n    for (let section = 0; section < sections.length; section++) {\n      const rows = sections[section];\n      if (rows === 0) {\n        continue;\n      }\n      // Section Header\n      const sectionHeaderHeight = this.getSectionHeaderHeight(section);\n      position = height;\n      height += sectionHeaderHeight;\n      if (\n        section > 1 &&\n        items.length > 0 &&\n        items[items.length - 1].type === BigListItemType.SECTION_HEADER\n      ) {\n        // Top Spacer\n        const initialSpacerHeight = getSpacerHeight();\n        const prevSection = items[items.length - 1];\n        items.splice(0, items.length);\n        push(\n          {\n            type: BigListItemType.HEADER,\n            position: position,\n            height: headerHeight,\n          },\n          {\n            type: BigListItemType.SPACER,\n            position: 0,\n            height: initialSpacerHeight - headerHeight,\n            section: prevSection.section,\n            index: 0,\n          },\n          prevSection,\n        );\n      }\n      pushItem({\n        type: BigListItemType.SECTION_HEADER,\n        position: position,\n        height: sectionHeaderHeight,\n        section: section,\n      });\n      // Items\n      let itemHeight = this.getItemHeight(section);\n      for (let index = 0; index < rows; index++) {\n        if (!this.uniform) {\n          itemHeight = this.getItemHeight(section, index);\n        }\n        position = height;\n        pushItem({\n          type: BigListItemType.ITEM,\n          position: position,\n          height: itemHeight,\n          section: section,\n          index: index,\n        });\n      }\n      // Section Footer\n      const sectionFooterHeight = this.getSectionFooterHeight(section);\n      if (sectionFooterHeight > 0) {\n        position = height;\n        pushItem({\n          type: BigListItemType.SECTION_FOOTER,\n          position: position,\n          height: sectionFooterHeight,\n          section: section,\n        });\n      }\n    }\n    // Footer\n    const footerHeight = this.getFooterHeight();\n    if (footerHeight > 0) {\n      position = height;\n      pushItem(\n        {\n          type: BigListItemType.FOOTER,\n          position: position,\n          height: footerHeight,\n        },\n        true,\n      );\n    }\n    // Bottom Spacer\n    height += this.insetBottom;\n    spacerHeight += this.insetBottom;\n    if (spacerHeight > 0) {\n      push({\n        type: BigListItemType.SPACER,\n        position: height - spacerHeight,\n        height: spacerHeight,\n        section: sections.length,\n      });\n    }\n    recycler.fill();\n    return {\n      height,\n      items,\n    };\n  }\n\n  /**\n   * Scroll to position.\n   * @param {int} targetSection\n   * @param {int} targetIndex\n   * @param {boolean} animated\n   */\n  scrollToPosition(targetSection, targetIndex, animated) {\n    const { sections, insetTop } = this;\n\n    // Header + inset\n    let scrollTop = insetTop + this.getHeaderHeight();\n    let section = 0;\n    let foundIndex = false;\n    while (section <= targetSection) {\n      const rows = Math.ceil(sections[section] / this.numColumns);\n      if (rows === 0) {\n        section += 1;\n        continue;\n      }\n      // Section header\n      scrollTop += this.getSectionHeaderHeight(section);\n\n      // Items\n      if (this.uniform) {\n        const uniformHeight = this.getItemHeight(section);\n        if (section === targetSection) {\n          scrollTop += uniformHeight * Math.ceil(targetIndex / this.numColumns);\n          foundIndex = true;\n        } else {\n          scrollTop += uniformHeight * rows;\n        }\n      } else {\n        for (let index = 0; index < rows; index++) {\n          if (\n            section < targetSection ||\n            (section === targetSection && index < targetIndex)\n          ) {\n            scrollTop += this.getItemHeight(\n              section,\n              Math.ceil(index / this.numColumns),\n            );\n          } else if (section === targetSection && index === targetIndex) {\n            foundIndex = true;\n            break;\n          }\n        }\n      }\n\n      // Section footer\n      if (!foundIndex) {\n        scrollTop += this.getSectionFooterHeight(section);\n      }\n      section += 1;\n    }\n    this.scrollView.scrollTo({\n      x: 0,\n      y: Math.max(0, scrollTop - this.getSectionHeaderHeight(targetSection)),\n      animated,\n    });\n    return true;\n  }\n}\n"]}