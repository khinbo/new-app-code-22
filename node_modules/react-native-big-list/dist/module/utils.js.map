{"version":3,"sources":["utils.js"],"names":["React","isNumeric","num","isNaN","parseFloat","isFinite","processBlock","containerHeight","scrollTop","batchSizeThreshold","batchSize","blockStart","blockEnd","Math","ceil","max","blockNumber","autobind","self","exclude","filter","key","match","pattern","test","some","getAllProperties","object","properties","Set","Object","getOwnPropertyNames","concat","getOwnPropertySymbols","add","getPrototypeOf","prototype","constructor","descriptor","getOwnPropertyDescriptor","value","bind","mergeViewStyle","style","defaultStyle","mergedStyle","Array","isArray","mergedDefaultStyle","push","unshift","createElement","Component","isValidElement"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n/**\n * Is numeric.\n * @param {any} num\n * @returns {boolean}\n */\nexport const isNumeric = (num) => {\n  return !isNaN(parseFloat(num)) && isFinite(num);\n};\n\n/**\n * Process block.\n * @param {number} containerHeight\n * @param {number} scrollTop\n * @param {number|null|undefined} batchSizeThreshold\n * @returns {{blockStart: number, batchSize: number, blockEnd: number}}\n */\nexport const processBlock = ({\n  containerHeight,\n  scrollTop,\n  batchSizeThreshold = 1,\n}) => {\n  if (containerHeight === 0) {\n    return {\n      batchSize: 0,\n      blockStart: 0,\n      blockEnd: 0,\n    };\n  }\n  const batchSize = Math.ceil(\n    containerHeight * Math.max(0.5, batchSizeThreshold),\n  );\n  const blockNumber = Math.ceil(scrollTop / batchSize);\n  const blockStart = batchSize * blockNumber;\n  const blockEnd = blockStart + batchSize;\n  return { batchSize, blockStart, blockEnd };\n};\n\n/**\n * Autobind context to class methods.\n * @param {object} self\n * @returns {{}}\n */\nexport const autobind = (self = {}) => {\n  const exclude = [\n    \"componentWillMount\",\n    /UNSAFE_.*/,\n    \"render\",\n    \"getSnapshotBeforeUpdate\",\n    \"componentDidMount\",\n    \"componentWillReceiveProps\",\n    \"shouldComponentUpdate\",\n    \"componentWillUpdate\",\n    \"componentDidUpdate\",\n    \"componentWillUnmount\",\n    \"componentDidCatch\",\n    \"setState\",\n    \"forceUpdate\",\n  ];\n\n  const filter = (key) => {\n    const match = (pattern) =>\n      typeof pattern === \"string\" ? key === pattern : pattern.test(key);\n    if (exclude) {\n      return !exclude.some(match);\n    }\n    return true;\n  };\n\n  const getAllProperties = (object) => {\n    const properties = new Set();\n    do {\n      for (const key of Object.getOwnPropertyNames(object).concat(\n        Object.getOwnPropertySymbols(object),\n      )) {\n        properties.add([object, key]);\n      }\n    } while (\n      (object = Object.getPrototypeOf(object)) &&\n      object !== Object.prototype\n    );\n    return properties;\n  };\n\n  for (const [object, key] of getAllProperties(self.constructor.prototype)) {\n    if (key === \"constructor\" || !filter(key)) {\n      continue;\n    }\n    const descriptor = Object.getOwnPropertyDescriptor(object, key);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      self[key] = self[key].bind(self);\n    }\n  }\n  return self;\n};\n\n/**\n * Merge styles\n * @param {array|object|null|undefined} style\n * @param {array|object} defaultStyle\n * @returns {Object}\n */\nexport const mergeViewStyle = (style, defaultStyle = {}) => {\n  let mergedStyle = style;\n  if (mergedStyle == null) {\n    mergedStyle = defaultStyle;\n  } else if (Array.isArray(style) && Array.isArray(defaultStyle)) {\n    const mergedDefaultStyle = [...defaultStyle];\n    mergedDefaultStyle.concat(style);\n    mergedStyle = mergedDefaultStyle;\n  } else if (Array.isArray(defaultStyle)) {\n    const mergedDefaultStyle = [...defaultStyle];\n    mergedDefaultStyle.push(style);\n    mergedStyle = mergedDefaultStyle;\n  } else if (Array.isArray(style)) {\n    mergedStyle = [...style];\n    mergedStyle.unshift(defaultStyle);\n  } else {\n    mergedStyle = [defaultStyle, style];\n  }\n  return mergedStyle;\n};\n\n/**\n * Get element from component.\n * @param {React.node} Component\n * @returns {JSX.Element|[]|*}\n */\nexport const createElement = (Component) => {\n  return Component != null ? (\n    React.isValidElement(Component) ? (\n      Component\n    ) : (\n      <Component />\n    )\n  ) : null;\n};\n"]}